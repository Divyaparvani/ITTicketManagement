@model ITMS.Model.Models.CommonLookUp
@{
    Layout = null;
}
<style>
    .padding-b-10 {
        padding-bottom: 10px;
    }
</style>
<div class="modal-header">
    <h5 class="modal-title">Update common lookup</h5>
    <button type="button" class="close" data-dismiss="modal">
        <span>x</span>
    </button>
</div>

@*@using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()*@

@*@Html.ValidationSummary(true, "", new { @class = "text-danger" })*@


<!--@*<div class="form-group">
        @Html.LabelFor(model => model.CreatedBy, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.CreatedBy, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CreatedBy, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.CreatedOn, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.CreatedOn, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CreatedOn, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.UpdatedBy, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.UpdatedBy, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.UpdatedBy, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.UpdatedOn, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.UpdatedOn, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.UpdatedOn, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.IsDeleted, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.IsDeleted)
                @Html.ValidationMessageFor(model => model.IsDeleted, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.IsActive)
                @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>*@-->
<div class="modal-body" style="background-color:aliceblue">
    <form id="myform1" name="myform">
        @Html.HiddenFor(model => model.Id)
        <div class="row">
            <div class="form-group">
                <label class="control-label col-md-3">Config Name</label>
                @*@Html.LabelFor(model => model.ConfigName, htmlAttributes: new { @class = "control-label col-md-3" })*@
                <div class="col-md-9 padding-b-10">
                    @Html.EditorFor(model => model.ConfigName, new { htmlAttributes = new { @class = "form-control", @id = "cn1", onekeyup = "validationmessage1()" } })
                    <span id="configNameError" style="color:red"></span>

                    @Html.ValidationMessageFor(model => model.ConfigName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-3">Config Key</label>
                @*@Html.LabelFor(model => model.ConfigKey, htmlAttributes: new { @class = "control-label col-md-3" })*@
                <div class="col-md-9 padding-b-10">
                    @Html.EditorFor(model => model.ConfigKey, new { htmlAttributes = new { @class = "form-control", @id = "ck1", onekeyup = "validationmessage1()" } })
                    <span id="configKeyError" style="color:red"></span>
                    @Html.ValidationMessageFor(model => model.ConfigKey, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-3">Config Value</label>
                @*@Html.LabelFor(model => model.ConfigValue, htmlAttributes: new { @class = "control-label col-md-3" })*@
                <div class="col-md-9 padding-b-10">
                    @Html.EditorFor(model => model.ConfigValue, new { htmlAttributes = new { @class = "form-control", @id = "cv1", onekeyup = "validationmessage1()" } })
                    <span id="configvalueError" style="color:red"></span>
                    @Html.ValidationMessageFor(model => model.ConfigValue, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-3">Display Order</label>
               @* @Html.LabelFor(model => model.DisplayOrder, htmlAttributes: new { @class = "control-label col-md-3" })*@
                <div class="col-md-9 padding-b-10">
                    @Html.EditorFor(model => model.DisplayOrder, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DisplayOrder, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-3">Description</label>
              @*  @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-3" })*@
                <div class="col-md-9 padding-b-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </form>
    <div class="modal-footer">
        <div id="displayerr2" class="text text-danger"></div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button onclick="validationmessage1()" type="submit" value="Update" class="btn btn-success" id="btnsubmit2">Update</button>
                <button type="submit" class="btn btn-danger" data-dismiss="modal" onclick="updateclose()">close</button>
            </div>
        </div>
    </div>
</div>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
<script>

        debugger;
            function mysubmit() {
            var myformdata = $("#myform1").serialize();
            debugger;
            $.ajax({
                type: "POST",
                url: "/CommonLookUp/Edit?" + this.id,

                data: myformdata,
                success: function (res) {
                    //debugger;
                    //location.reload();
                    //$("#addclp").modal("hide");
                    if (res == '') {
                        location.reload();
                        $("#addclp").modal("hide");
                    }
                    else if (res == "Already Exists") {
                        var myDiv = $("#displayerr2");
                        var paragraph = document.createElement("p");
                        paragraph.textContent = "Already Exists!";
                        myDiv.empty();
                        myDiv.append(paragraph);
                    }
                    
                }
            })

    }

    function validationmessage1() {        if (displayerr2) {            debugger;            var configName = $("#cn1").val();            var configKey = $("#ck1").val();            var configValue = $("#cv1").val();            if (configName == '') {                $("#configNameError").text("Config Name is required.")            }            else {                $("#configNameError").text("")            }            if (configKey == '') {                $("#configKeyError").text("Config Key is required.")            }            else {                $("#configKeyError").text("")            }            if (configValue == '') {                $("#configValueError").text("Config Value is required.")            }            else {                $("#configValueError").text("")            }            if (configName != '' && configKey != '' && configValue != '') {                mysubmit();
            }        }    }

</script>


@*<div>
        @Html.ActionLink("Back to List", "Index")
    </div>*@

@*@section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }*@
